{"version":3,"sources":["components/WordCount/WordCount.js","components/TextInput/TextInput.js","components/SynonymsSelector/SynonymsSelector.js","components/App/App.js","serviceWorker.js","index.js","empty_image.svg"],"names":["WordCount","props","className","words","sort","a","b","count","map","word","key","value","TextInput","inputRef","React","useRef","size","onClick","processText","enableHighlights","event","target","tagName","toUpperCase","setWord","getAttribute","current","focus","id","dangerouslySetInnerHTML","highlightedText","forEach","regex","RegExp","replace","__html","getHighlightedText","TextArea","ref","onChange","autoSize","length","src","image","alt","SynonymsSelector","App","useState","text","setText","setWords","setEnableHighlights","checkedChildren","type","theme","unCheckedChildren","enable","body","document","querySelector","classList","add","remove","e","inputText","textArray","split","wordsCount","wordCount","find","wordObject","toLowerCase","push","filter","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.e684c691.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './WordCount.css';\r\n\r\nexport default function WordCount(props) {\r\n\r\n    return (<div className=\"word-count\">\r\n        {props.words.sort(((a, b) => {\r\n            if (a.count < b.count) return 1;\r\n            else if (a.count > b.count) return -1;\r\n            else return 0;\r\n        })).map(word => (<div key={word.value} className=\"word-count-group\">\r\n            <span className=\"word-count-title\">{word.value}</span>\r\n            <span className=\"word-count-subtitle\">{word.count} repetições</span>\r\n        </div>))}\r\n    </div>);\r\n}","import React from \"react\";\r\nimport {Input, Button} from \"antd\";\r\nimport './TextInput.css';\r\nimport image from '../../empty_image.svg'\r\n\r\nexport default function TextInput(props) {\r\n\r\n    const inputRef = React.useRef(null);\r\n\r\n    function getHighlightedText() {\r\n\r\n        let highlightedText = props.value;\r\n\r\n        props.words.forEach(word => {\r\n\r\n            let regex = new RegExp(`${word.value}(?=[\\\\s.;])`, 'gi');\r\n\r\n            highlightedText = highlightedText.replace(regex, `<mark class=\"mark\" data-word-value=\"${word.value}\">${word.value}</mark>`)\r\n        });\r\n\r\n        return {__html: highlightedText};\r\n    }\r\n\r\n    return (<>\r\n        <div className=\"text-input-header-container\">\r\n            <Button size=\"small\" onClick={() => props.processText('')}>Limpar</Button>\r\n        </div>\r\n        <div className=\"input-text-container\">\r\n            {props.enableHighlights && <div onClick={event => {\r\n\r\n                if (event.target.tagName.toUpperCase() === 'MARK') props.setWord(event.target.getAttribute('data-word-value'));\r\n                else inputRef.current.focus()\r\n\r\n            }} id=\"input-text-highlight-container\" dangerouslySetInnerHTML={getHighlightedText()}/>}\r\n            <Input.TextArea ref={inputRef} value={props.value} className=\"input-text\"\r\n                            onChange={event => props.processText(event.target.value, event)} autoSize={true}/>\r\n            {props.value.length === 0 && <div className=\"image-container\">\r\n                <img src={image} alt=\"Vazio\"/>\r\n                <span>Nenhum texto, que tal escrever algo? Mínimo de 120 caracteres</span>\r\n            </div>}\r\n        </div>\r\n    </>)\r\n}","import React from \"react\";\r\nimport './SynonymsSelector.css';\r\n\r\nexport default function SynonymsSelector(props) {\r\n    return (<div className=\"synonyms-selector\">\r\n        <span className=\"synonyms-selector-title\">{props.word}</span>\r\n    </div>)\r\n}","import React from 'react';\r\nimport {Icon, Switch} from \"antd\";\r\nimport './App.css';\r\nimport WordCount from \"../WordCount/WordCount\";\r\nimport TextInput from \"../TextInput/TextInput\";\r\nimport SynonymsSelector from \"../SynonymsSelector/SynonymsSelector\";\r\n\r\nfunction App() {\r\n\r\n    const [text, setText] = React.useState('');\r\n    const [words, setWords] = React.useState([]);\r\n    const [word, setWord] = React.useState(null);\r\n    const [enableHighlights, setEnableHighlights] = React.useState(false);\r\n\r\n    function processText(value, e) {\r\n\r\n        const inputText = typeof value === 'string' ? value : e.target.value;\r\n\r\n        setText(inputText);\r\n\r\n        if (inputText.length >= 120) {\r\n\r\n            setEnableHighlights(true);\r\n\r\n            let textArray = inputText.split(' ');\r\n\r\n            let wordsCount = [];\r\n\r\n            textArray.forEach(word => {\r\n\r\n                if (word.length >= 3) {\r\n\r\n                    let wordCount = wordsCount.find(wordObject => wordObject.value === word.toLowerCase());\r\n\r\n                    if (wordCount) wordCount.count = wordCount.count + 1;\r\n                    else wordsCount.push({value: word.toLowerCase(), count: 1});\r\n                }\r\n            });\r\n\r\n            setWords(wordsCount.filter(word => word.count > 2));\r\n\r\n        } else {\r\n\r\n            setEnableHighlights(false);\r\n            setWords([]);\r\n            setWord(null);\r\n        }\r\n    }\r\n\r\n    function toggleNightMode(enable) {\r\n\r\n        let body = document.querySelector('body');\r\n\r\n        if (enable) body.classList.add('dark-mode');\r\n        else body.classList.remove('dark-mode')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <header className=\"header\">\r\n                <h1>eSSay</h1>\r\n                <div className=\"toggle-dark-mode-container\">\r\n                    <Switch\r\n                        checkedChildren={<Icon type=\"bulb\" theme=\"filled\"/>}\r\n                        unCheckedChildren={<Icon type=\"bulb\"/>}\r\n                        onChange={toggleNightMode}\r\n                    /></div>\r\n            </header>\r\n            <main className=\"content\">\r\n                <aside className=\"aside\">\r\n                    {word !== null && <SynonymsSelector word={word}/>}\r\n                </aside>\r\n                <div className=\"container\">\r\n                    <TextInput\r\n                        value={text}\r\n                        words={words}\r\n                        processText={processText}\r\n                        enableHighlights={enableHighlights}\r\n                        setWord={setWord}\r\n                    />\r\n                </div>\r\n                <aside className=\"aside\">\r\n                    {words.length > 0 && <WordCount words={words}/>}\r\n                </aside>\r\n            </main>\r\n            <footer className=\"footer\">\r\n                <a href=\"https://github.com/victormt4/essay-analyzer\" target=\"_blank\" rel=\"noopener noreferrer\"><Icon\r\n                    type=\"github\"/></a>\r\n                <a href=\"mailto:victor.mt4@gmail.com\"><Icon type=\"mail\" theme=\"filled\"/></a>\r\n                <a href=\"https://www.linkedin.com/in/victor-mota-a01b8714a/\" target=\"_blank\"\r\n                   rel=\"noopener noreferrer\"><Icon type=\"linkedin\" theme=\"filled\"/></a>\r\n            </footer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/empty_image.cb61ac4f.svg\";"],"sourceRoot":""}