{"version":3,"sources":["components/WordCount/WordCount.js","components/SynonymsSelector/SynonymsSelector.js","libs/MediaQueries.js","components/WordCountPopover/WordCountPopover.js","components/CodeMirrorWrapper/CodeMirrorWrapper.js","components/App/App.js","serviceWorker.js","index.js","empty_image.svg"],"names":["WordCount","props","className","words","sort","a","b","count","map","word","key","value","SynonymsSelector","React","useState","requestStatus","synonyms","state","setState","useEffect","prevState","fetch","toLowerCase","normalize","replace","method","headers","then","res","text","html","el","document","createElement","innerHTML","querySelectorAll","forEach","synonym","push","innerText","catch","error","console","log","slice","MediaQueries","SM","window","matchMedia","matches","MD","LG","XL","WordCountPopover","content","trigger","placement","shape","type","length","CodeMirrorWrapper","processText","bind","this","editor","CodeMirror","getElementById","lineWrapping","on","instance","changeObj","getValue","wordsCount","split","wordCount","find","wordObject","filter","obj","markText","setWords","id","Component","App","desktopMode","setDesktopMode","resizeHandler","event","addEventListener","removeEventListener","checkedChildren","BulbFilled","unCheckedChildren","BulbOutlined","onChange","enable","body","querySelector","classList","add","remove","href","target","rel","GithubOutlined","MailFilled","LinkedinFilled","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f3f6397e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './WordCount.css';\r\n\r\nexport default function WordCount(props) {\r\n\r\n    return (<div className=\"word-count\">\r\n        {props.words.sort(((a, b) => {\r\n            if (a.count < b.count) return 1;\r\n            else if (a.count > b.count) return -1;\r\n            else return 0;\r\n        })).map(word => (<div key={word.value} className=\"word-count-group\">\r\n            <span className=\"word-count-title\">{word.value}</span>\r\n            <span className=\"word-count-subtitle\">{word.count} repetições</span>\r\n        </div>))}\r\n    </div>);\r\n}","import React from \"react\";\r\nimport './SynonymsSelector.css';\r\n\r\nexport default function SynonymsSelector(props) {\r\n\r\n    const [state, setState] = React.useState({\r\n        requestStatus: -1,\r\n        synonyms: []\r\n    });\r\n\r\n    React.useEffect(() => {\r\n\r\n        setState(prevState => ({...prevState, requestStatus: 1}));\r\n\r\n        let request = fetch(`https://cors-anywhere.herokuapp.com/https://www.sinonimos.com.br/${props.word.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")}`, {\r\n            method: 'GET',\r\n            headers: {'x-requested-with': 'xmlhttprequest', 'Content-Type': 'text/plain; charset=ISO-8859-1'}\r\n        });\r\n\r\n        request\r\n            .then(res => res.text())\r\n            .then(html => {\r\n\r\n                let el = document.createElement('div');\r\n\r\n                el.innerHTML = html;\r\n\r\n                let synonyms = el.querySelectorAll('.s-wrapper .sinonimos a');\r\n\r\n                let words = [];\r\n\r\n                synonyms.forEach(synonym => {\r\n\r\n                    words.push(synonym.innerText);\r\n                });\r\n\r\n                setState(prevState => ({...prevState, synonyms: words, requestStatus: 200}))\r\n\r\n            }).catch(error => console.log(error))\r\n\r\n    }, [props.word]);\r\n\r\n    return (<div className=\"synonyms-selector\">\r\n        <span className=\"synonyms-selector-title\">{props.word}</span>\r\n        <div className=\"synonyms-container\">\r\n            {state.requestStatus === 200\r\n                ? state.synonyms.slice(0, 10).map(synonym => <span key={synonym}>{synonym}</span>)\r\n                : <span>carregando...</span>\r\n            }\r\n        </div>\r\n    </div>)\r\n}","const MediaQueries = {\r\n    SM: () => window.matchMedia('(min-width: 576px)').matches,\r\n    MD: () => window.matchMedia('(min-width: 768px)').matches,\r\n    LG: () => window.matchMedia('(min-width: 992px)').matches,\r\n    XL: () => window.matchMedia('(min-width: 1200px)').matches\r\n};\r\nexport default MediaQueries;","import React from \"react\";\r\nimport {Popover, Button} from \"antd\";\r\nimport './WordCountPopover.css';\r\n\r\nexport default function WordCountPopover (props) {\r\n\r\n    let content = (\r\n        <div className=\"word-count-popover-content\">\r\n            { props.words.sort(((a, b) => {\r\n                if (a.count < b.count) return 1;\r\n                else if (a.count > b.count) return -1;\r\n                else return 0;\r\n            })).map(word => (<div key={word.value} className=\"word-count-group\">\r\n                <span className=\"word-count-popover-title\">{word.value}</span>\r\n                <span className=\"word-count-popover-subtitle\">{word.count} repetições</span>\r\n            </div>))}\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"word-count-popover\">\r\n            <Popover content={content} trigger=\"click\" placement=\"bottomRight\">\r\n                <Button shape=\"round\" type=\"primary\" >{props.words ? props.words.length : 0} palavras repetidas</Button>\r\n            </Popover>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport CodeMirror from \"codemirror/src/codemirror\"\r\nimport 'codemirror/lib/codemirror.css';\r\nimport \"./CodeMirrorWrapper.css\";\r\nimport image from '../../empty_image.svg';\r\n\r\nclass CodeMirrorWrapper extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.processText = this.processText.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.editor = CodeMirror(document.getElementById('code-mirror-node'), {\r\n            lineWrapping: true\r\n        });\r\n\r\n        this.editor.on('change', this.processText)\r\n\r\n    }\r\n\r\n    processText(instance, changeObj) {\r\n\r\n        let text = this.editor.getValue();\r\n\r\n        let wordsCount = [];\r\n\r\n        text.split(' ').forEach(word => {\r\n\r\n            if (word.length >= 3) {\r\n\r\n                let wordCount = wordsCount.find(wordObject => wordObject.value === word.toLowerCase());\r\n\r\n                if (wordCount) wordCount.count = wordCount.count + 1;\r\n                else wordsCount.push({value: word.toLowerCase(), count: 1});\r\n            }\r\n        });\r\n\r\n        wordsCount = wordsCount.filter(obj => obj.count > 2);\r\n\r\n        console.log(this.editor.markText.find);\r\n\r\n        this.props.setWords(wordsCount);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"code-mirror-wrapper\">\r\n                <div id=\"code-mirror-node\"/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CodeMirrorWrapper;","import React from 'react';\r\nimport {Switch} from \"antd\";\r\nimport {BulbOutlined, BulbFilled, GithubOutlined, MailFilled, LinkedinFilled} from \"@ant-design/icons\";\r\nimport './App.css';\r\nimport WordCount from \"../WordCount/WordCount\";\r\nimport TextInput from \"../TextInput/TextInput\";\r\nimport SynonymsSelector from \"../SynonymsSelector/SynonymsSelector\";\r\nimport MediaQueries from \"../../libs/MediaQueries\";\r\nimport WordCountPopover from \"../WordCountPopover/WordCountPopover\";\r\nimport CodeMirrorWrapper from \"../CodeMirrorWrapper/CodeMirrorWrapper\";\r\n\r\nfunction App() {\r\n\r\n    const [text, setText] = React.useState('');\r\n    const [words, setWords] = React.useState([]);\r\n    const [word, setWord] = React.useState(null);\r\n    const [enableHighlights, setEnableHighlights] = React.useState(false);\r\n    const [desktopMode, setDesktopMode] = React.useState(MediaQueries.MD());\r\n\r\n    function processText(value, e) {\r\n\r\n        const inputText = typeof value === 'string' ? value : e.target.value;\r\n\r\n        setText(inputText);\r\n\r\n        if (inputText.length >= 120) {\r\n\r\n            setEnableHighlights(true);\r\n\r\n            let textArray = inputText.split(' ');\r\n\r\n            let wordsCount = [];\r\n\r\n            textArray.forEach(word => {\r\n\r\n                if (word.length >= 3) {\r\n\r\n                    let wordCount = wordsCount.find(wordObject => wordObject.value === word.toLowerCase());\r\n\r\n                    if (wordCount) wordCount.count = wordCount.count + 1;\r\n                    else wordsCount.push({value: word.toLowerCase(), count: 1});\r\n                }\r\n            });\r\n\r\n            setWords(wordsCount.filter(word => word.count > 2));\r\n\r\n        } else {\r\n\r\n            setEnableHighlights(false);\r\n            setWords([]);\r\n            setWord(null);\r\n        }\r\n    }\r\n\r\n    function toggleNightMode(enable) {\r\n\r\n        let body = document.querySelector('body');\r\n\r\n        if (enable) body.classList.add('dark-mode');\r\n        else body.classList.remove('dark-mode')\r\n    }\r\n\r\n    //Criando evento para detecar resize da janela\r\n    React.useEffect(() => {\r\n\r\n        let resizeHandler = function (event) {\r\n\r\n            setDesktopMode(MediaQueries.MD());\r\n        };\r\n\r\n        window.addEventListener('resize', resizeHandler);\r\n\r\n        //Cleanup\r\n        return () => window.removeEventListener('resize', resizeHandler);\r\n\r\n    }, []);\r\n\r\n    return <>\r\n        <header className=\"header\">\r\n            <h1>eSSay</h1>\r\n            <div className=\"toggle-dark-mode-container\">\r\n                <Switch\r\n                    checkedChildren={<BulbFilled/>}\r\n                    unCheckedChildren={<BulbOutlined/>}\r\n                    onChange={toggleNightMode}\r\n                /></div>\r\n        </header>\r\n        <main className=\"content\">\r\n            {desktopMode && <aside className=\"aside\">\r\n                {word !== null && <SynonymsSelector word={word}/>}\r\n            </aside>}\r\n            <div className=\"container\">\r\n                {!desktopMode && <WordCountPopover words={words}/>}\r\n                {/*<TextInput*/}\r\n                {/*    value={text}*/}\r\n                {/*    words={words}*/}\r\n                {/*    processText={processText}*/}\r\n                {/*    enableHighlights={enableHighlights}*/}\r\n                {/*    setWord={setWord}*/}\r\n                {/*/>*/}\r\n                <CodeMirrorWrapper\r\n                    setWords={setWords}\r\n                />\r\n            </div>\r\n            {desktopMode && <aside className=\"aside\">\r\n                {words.length > 0 && <WordCount words={words}/>}\r\n            </aside>}\r\n        </main>\r\n        <footer className=\"footer\">\r\n            <a href=\"https://github.com/victormt4/essay-analyzer\" target=\"_blank\"\r\n               rel=\"noopener noreferrer\"><GithubOutlined/></a>\r\n            <a href=\"mailto:victor.mt4@gmail.com\"><MailFilled/></a>\r\n            <a href=\"https://www.linkedin.com/in/victor-mota-a01b8714a/\" target=\"_blank\"\r\n               rel=\"noopener noreferrer\"><LinkedinFilled/></a>\r\n        </footer>\r\n    </>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/empty_image.6606dc27.svg\";"],"sourceRoot":""}